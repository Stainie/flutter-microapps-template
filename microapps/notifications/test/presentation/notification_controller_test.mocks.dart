// Mocks generated by Mockito 5.3.2 from annotations
// in notifications/test/presentation/notification_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:crashlytics/crashlytics.dart' as _i3;
import 'package:flutter/material.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:notifications/domain/entities/notification.dart' as _i12;
import 'package:notifications/domain/errors/notification_errors.dart' as _i7;
import 'package:notifications/domain/repositories/notification_repository.dart'
    as _i2;
import 'package:notifications/domain/usecases/change_device_language_usecase.dart'
    as _i14;
import 'package:notifications/domain/usecases/delete_notification_usecase.dart'
    as _i13;
import 'package:notifications/domain/usecases/get_notifications_usecase.dart'
    as _i11;
import 'package:notifications/domain/usecases/push_notifications_permission_denied_usecase.dart'
    as _i10;
import 'package:notifications/domain/usecases/read_notification_usecase.dart'
    as _i9;
import 'package:notifications/domain/usecases/subscribe_to_push_notifications_usecase.dart'
    as _i5;
import 'package:notifications/domain/usecases/unsubscribe_from_push_notifications_usecase.dart'
    as _i8;
import 'package:result/result.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotificationRepository_0 extends _i1.SmartFake
    implements _i2.NotificationRepository {
  _FakeNotificationRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCrashlyticsService_1 extends _i1.SmartFake
    implements _i3.CrashlyticsService {
  _FakeCrashlyticsService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_2<ERR extends Object, OK extends Object> extends _i1.SmartFake
    implements _i4.Result<ERR, OK> {
  _FakeResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SubscribeToPushNotificationsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscribeToPushNotificationsUsecase extends _i1.Mock
    implements _i5.SubscribeToPushNotificationsUsecase {
  MockSubscribeToPushNotificationsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get notificationRepository => (super.noSuchMethod(
        Invocation.getter(#notificationRepository),
        returnValue: _FakeNotificationRepository_0(
          this,
          Invocation.getter(#notificationRepository),
        ),
      ) as _i2.NotificationRepository);
  @override
  _i3.CrashlyticsService get crash => (super.noSuchMethod(
        Invocation.getter(#crash),
        returnValue: _FakeCrashlyticsService_1(
          this,
          Invocation.getter(#crash),
        ),
      ) as _i3.CrashlyticsService);
  @override
  _i6.Future<_i4.Result<_i7.NotificationError, bool>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<_i4.Result<_i7.NotificationError, bool>>.value(
            _FakeResult_2<_i7.NotificationError, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Result<_i7.NotificationError, bool>>);
}

/// A class which mocks [UnsubscribeFromPushNotificationsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUnsubscribeFromPushNotificationsUsecase extends _i1.Mock
    implements _i8.UnsubscribeFromPushNotificationsUsecase {
  MockUnsubscribeFromPushNotificationsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get notificationRepository => (super.noSuchMethod(
        Invocation.getter(#notificationRepository),
        returnValue: _FakeNotificationRepository_0(
          this,
          Invocation.getter(#notificationRepository),
        ),
      ) as _i2.NotificationRepository);
  @override
  _i3.CrashlyticsService get crash => (super.noSuchMethod(
        Invocation.getter(#crash),
        returnValue: _FakeCrashlyticsService_1(
          this,
          Invocation.getter(#crash),
        ),
      ) as _i3.CrashlyticsService);
  @override
  _i6.Future<_i4.Result<_i7.NotificationError, bool>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<_i4.Result<_i7.NotificationError, bool>>.value(
            _FakeResult_2<_i7.NotificationError, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Result<_i7.NotificationError, bool>>);
}

/// A class which mocks [ReadNotificationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockReadNotificationUsecase extends _i1.Mock
    implements _i9.ReadNotificationUsecase {
  MockReadNotificationUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get notificationRepository => (super.noSuchMethod(
        Invocation.getter(#notificationRepository),
        returnValue: _FakeNotificationRepository_0(
          this,
          Invocation.getter(#notificationRepository),
        ),
      ) as _i2.NotificationRepository);
  @override
  _i3.CrashlyticsService get crash => (super.noSuchMethod(
        Invocation.getter(#crash),
        returnValue: _FakeCrashlyticsService_1(
          this,
          Invocation.getter(#crash),
        ),
      ) as _i3.CrashlyticsService);
  @override
  _i6.Future<_i4.Result<_i7.NotificationError, bool>> call(
          int? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [notificationId],
        ),
        returnValue: _i6.Future<_i4.Result<_i7.NotificationError, bool>>.value(
            _FakeResult_2<_i7.NotificationError, bool>(
          this,
          Invocation.method(
            #call,
            [notificationId],
          ),
        )),
      ) as _i6.Future<_i4.Result<_i7.NotificationError, bool>>);
}

/// A class which mocks [PushNotificationsPermissionDeniedUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushNotificationsPermissionDeniedUsecase extends _i1.Mock
    implements _i10.PushNotificationsPermissionDeniedUsecase {
  MockPushNotificationsPermissionDeniedUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get notificationRepository => (super.noSuchMethod(
        Invocation.getter(#notificationRepository),
        returnValue: _FakeNotificationRepository_0(
          this,
          Invocation.getter(#notificationRepository),
        ),
      ) as _i2.NotificationRepository);
  @override
  _i3.CrashlyticsService get crash => (super.noSuchMethod(
        Invocation.getter(#crash),
        returnValue: _FakeCrashlyticsService_1(
          this,
          Invocation.getter(#crash),
        ),
      ) as _i3.CrashlyticsService);
  @override
  _i6.Future<_i4.Result<_i7.NotificationError, bool>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<_i4.Result<_i7.NotificationError, bool>>.value(
            _FakeResult_2<_i7.NotificationError, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Result<_i7.NotificationError, bool>>);
}

/// A class which mocks [GetNotificationsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNotificationsUseCase extends _i1.Mock
    implements _i11.GetNotificationsUseCase {
  MockGetNotificationsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get notificationRepository => (super.noSuchMethod(
        Invocation.getter(#notificationRepository),
        returnValue: _FakeNotificationRepository_0(
          this,
          Invocation.getter(#notificationRepository),
        ),
      ) as _i2.NotificationRepository);
  @override
  _i3.CrashlyticsService get crash => (super.noSuchMethod(
        Invocation.getter(#crash),
        returnValue: _FakeCrashlyticsService_1(
          this,
          Invocation.getter(#crash),
        ),
      ) as _i3.CrashlyticsService);
  @override
  _i6.Future<_i4.Result<_i7.NotificationError, List<_i12.Notification>>>
      call() => (super.noSuchMethod(
            Invocation.method(
              #call,
              [],
            ),
            returnValue: _i6.Future<
                    _i4.Result<_i7.NotificationError,
                        List<_i12.Notification>>>.value(
                _FakeResult_2<_i7.NotificationError, List<_i12.Notification>>(
              this,
              Invocation.method(
                #call,
                [],
              ),
            )),
          ) as _i6.Future<
              _i4.Result<_i7.NotificationError, List<_i12.Notification>>>);
}

/// A class which mocks [DeleteNotificationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteNotificationUsecase extends _i1.Mock
    implements _i13.DeleteNotificationUsecase {
  MockDeleteNotificationUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get notificationRepository => (super.noSuchMethod(
        Invocation.getter(#notificationRepository),
        returnValue: _FakeNotificationRepository_0(
          this,
          Invocation.getter(#notificationRepository),
        ),
      ) as _i2.NotificationRepository);
  @override
  _i3.CrashlyticsService get crash => (super.noSuchMethod(
        Invocation.getter(#crash),
        returnValue: _FakeCrashlyticsService_1(
          this,
          Invocation.getter(#crash),
        ),
      ) as _i3.CrashlyticsService);
  @override
  _i6.Future<_i4.Result<_i7.NotificationError, bool>> call(
          int? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [notificationId],
        ),
        returnValue: _i6.Future<_i4.Result<_i7.NotificationError, bool>>.value(
            _FakeResult_2<_i7.NotificationError, bool>(
          this,
          Invocation.method(
            #call,
            [notificationId],
          ),
        )),
      ) as _i6.Future<_i4.Result<_i7.NotificationError, bool>>);
}

/// A class which mocks [ChangeDeviceLanguageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangeDeviceLanguageUsecase extends _i1.Mock
    implements _i14.ChangeDeviceLanguageUsecase {
  MockChangeDeviceLanguageUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get notificationRepository => (super.noSuchMethod(
        Invocation.getter(#notificationRepository),
        returnValue: _FakeNotificationRepository_0(
          this,
          Invocation.getter(#notificationRepository),
        ),
      ) as _i2.NotificationRepository);
  @override
  _i3.CrashlyticsService get crash => (super.noSuchMethod(
        Invocation.getter(#crash),
        returnValue: _FakeCrashlyticsService_1(
          this,
          Invocation.getter(#crash),
        ),
      ) as _i3.CrashlyticsService);
  @override
  _i6.Future<_i4.Result<_i7.NotificationError, bool>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<_i4.Result<_i7.NotificationError, bool>>.value(
            _FakeResult_2<_i7.NotificationError, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Result<_i7.NotificationError, bool>>);
}

/// A class which mocks [CrashlyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrashlyticsService extends _i1.Mock
    implements _i3.CrashlyticsService {
  MockCrashlyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> logError(
    Object? exception,
    StackTrace? stack, {
    String? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logError,
          [
            exception,
            stack,
          ],
          {#reason: reason},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> logNetworkError({
    required String? url,
    required Map<String, Object?>? bodyRequest,
    required Map<String, Object?>? bodyResponse,
    required int? statusCode,
    required String? method,
    required Map<String, Object?>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logNetworkError,
          [],
          {
            #url: url,
            #bodyRequest: bodyRequest,
            #bodyResponse: bodyResponse,
            #statusCode: statusCode,
            #method: method,
            #headers: headers,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setUserId(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #setUserId,
          [userId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setCustomKey(
    String? key,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomKey,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setCurrentScreen(String? currentPage) => (super.noSuchMethod(
        Invocation.method(
          #setCurrentScreen,
          [currentPage],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> onFlutterError(_i15.FlutterErrorDetails? details) =>
      (super.noSuchMethod(
        Invocation.method(
          #onFlutterError,
          [details],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
