// Mocks generated by Mockito 5.3.2 from annotations
// in notifications/test/datasource/services/notification_service_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:crashlytics/crashlytics_service.dart' as _i5;
import 'package:flutter/material.dart' as _i6;
import 'package:http_abstraction/http_abstraction.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:result/result.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<ERR extends Object, OK extends Object> extends _i1.SmartFake
    implements _i2.Result<ERR, OK> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockIHttpClient extends _i1.Mock implements _i3.IHttpClient {
  MockIHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>> get({
    required String? endpoint,
    Map<String, Object?>? queryParameters,
    Map<String, Object?>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #endpoint: endpoint,
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>.value(
                _FakeResult_0<_i3.HttpError, _i3.HttpResponse>(
          this,
          Invocation.method(
            #get,
            [],
            {
              #endpoint: endpoint,
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>);
  @override
  _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>> post({
    required String? endpoint,
    Map<String, Object?>? queryParameters,
    _i3.HttpBody? body,
    Map<String, Object?>? headers,
    Map<String, String>? filePaths,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [],
          {
            #endpoint: endpoint,
            #queryParameters: queryParameters,
            #body: body,
            #headers: headers,
            #filePaths: filePaths,
          },
        ),
        returnValue:
            _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>.value(
                _FakeResult_0<_i3.HttpError, _i3.HttpResponse>(
          this,
          Invocation.method(
            #post,
            [],
            {
              #endpoint: endpoint,
              #queryParameters: queryParameters,
              #body: body,
              #headers: headers,
              #filePaths: filePaths,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>);
  @override
  _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>> put({
    required String? endpoint,
    Map<String, Object?>? queryParameters,
    _i3.HttpBody? body,
    Map<String, Object?>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [],
          {
            #endpoint: endpoint,
            #queryParameters: queryParameters,
            #body: body,
            #headers: headers,
          },
        ),
        returnValue:
            _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>.value(
                _FakeResult_0<_i3.HttpError, _i3.HttpResponse>(
          this,
          Invocation.method(
            #put,
            [],
            {
              #endpoint: endpoint,
              #queryParameters: queryParameters,
              #body: body,
              #headers: headers,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>);
  @override
  _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>> patch({
    required String? endpoint,
    Map<String, Object?>? queryParameters,
    _i3.HttpBody? body,
    Map<String, Object?>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [],
          {
            #endpoint: endpoint,
            #queryParameters: queryParameters,
            #body: body,
            #headers: headers,
          },
        ),
        returnValue:
            _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>.value(
                _FakeResult_0<_i3.HttpError, _i3.HttpResponse>(
          this,
          Invocation.method(
            #patch,
            [],
            {
              #endpoint: endpoint,
              #queryParameters: queryParameters,
              #body: body,
              #headers: headers,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>);
  @override
  _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>> delete({
    required String? endpoint,
    Map<String, Object?>? queryParameters,
    _i3.HttpBody? body,
    Map<String, Object?>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #endpoint: endpoint,
            #queryParameters: queryParameters,
            #body: body,
            #headers: headers,
          },
        ),
        returnValue:
            _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>.value(
                _FakeResult_0<_i3.HttpError, _i3.HttpResponse>(
          this,
          Invocation.method(
            #delete,
            [],
            {
              #endpoint: endpoint,
              #queryParameters: queryParameters,
              #body: body,
              #headers: headers,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>);
  @override
  _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>> fetch(
          _i3.HttpRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [request],
        ),
        returnValue:
            _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>.value(
                _FakeResult_0<_i3.HttpError, _i3.HttpResponse>(
          this,
          Invocation.method(
            #fetch,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i3.HttpError, _i3.HttpResponse>>);
  @override
  void addInterceptor(_i3.HttpInterceptor? interceptor) => super.noSuchMethod(
        Invocation.method(
          #addInterceptor,
          [interceptor],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CrashlyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCrashlyticsService extends _i1.Mock
    implements _i5.CrashlyticsService {
  MockCrashlyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> logError(
    Object? exception,
    StackTrace? stack, {
    String? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logError,
          [
            exception,
            stack,
          ],
          {#reason: reason},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> logNetworkError({
    required String? url,
    required Map<String, Object?>? bodyRequest,
    required Map<String, Object?>? bodyResponse,
    required int? statusCode,
    required String? method,
    required Map<String, Object?>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logNetworkError,
          [],
          {
            #url: url,
            #bodyRequest: bodyRequest,
            #bodyResponse: bodyResponse,
            #statusCode: statusCode,
            #method: method,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> setUserId(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #setUserId,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> setCustomKey(
    String? key,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomKey,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> setCurrentScreen(String? currentPage) => (super.noSuchMethod(
        Invocation.method(
          #setCurrentScreen,
          [currentPage],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> onFlutterError(_i6.FlutterErrorDetails? details) =>
      (super.noSuchMethod(
        Invocation.method(
          #onFlutterError,
          [details],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
